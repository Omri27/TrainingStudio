package zina_eliran.app.API;

import android.util.Log;

import com.firebase.client.Firebase;
import com.firebase.client.FirebaseError;
import com.firebase.client.Query;

import java.util.ArrayList;
import java.util.Date;

import zina_eliran.app.API.Listeners.DALFBOnCompleteListener;
import zina_eliran.app.API.Listeners.GetBEObjectEventListener;
import zina_eliran.app.API.Listeners.ReadDataTypeEnum;
import zina_eliran.app.BusinessEntities.BEResponse;
import zina_eliran.app.BusinessEntities.BEResponseStatusEnum;
import zina_eliran.app.BusinessEntities.BETraining;
import zina_eliran.app.BusinessEntities.BEUser;
import zina_eliran.app.BusinessEntities.CMNLogHelper;

/**
 * Created by Zina K on 9/10/2016.
 */
public class DAL{

    //TODO Zina - please add try catch :)
    private static Firebase rootRef = new Firebase("https://trainingstudiofb.firebaseio.com");
    private static Firebase usersRef = rootRef.child("Users");
    private static Firebase trainingsRef = rootRef.child("Trainings");

    public DAL(){
        tests();
    }

    public static void registerUser(BEUser user) {
        if (user != null){
            user.setVerificationCode(ServerAPI.generateVerificationCode());

            try{
                usersRef = rootRef.child("Users");
                //Set location to push
                Firebase newUserRef = usersRef.push();

                // Get the unique ID generated by push()
                String generatedUniqueID = newUserRef.getKey();
                user.setId(generatedUniqueID);

                //Save user including UUID
                newUserRef.setValue(user);
                Log.e("DALUserCreated", user.getName());
            } catch (Exception e) {
                CMNLogHelper.logError("DAL", e.getMessage());
            }
        }





    }

    //GetBEObjectEventListener should callback setActionResult with requested object
    private static void getUserByUID(String userId){
        if (!userId.isEmpty()) {
            Firebase singleUserRef = usersRef.child(userId);
            GetBEObjectEventListener listener = new GetBEObjectEventListener(ReadDataTypeEnum.user);
            singleUserRef.addListenerForSingleValueEvent(listener);
        }
    }

    //DALFBOnCompleteListener called on setValue() which calls setActionResult() with result
    public static void updateUser(BEUser user){
        //Check and update object if it exists in database, otherwise send error in response
        if (!user.getId().isEmpty()){
            try{
                Firebase specificUser = usersRef.child(user.getId());
                DALFBOnCompleteListener listener = new DALFBOnCompleteListener();
                specificUser.setValue(user, listener);
            }
            catch (Exception e){
                Log.e("DAL", e.getMessage());
            }
        }
        else
            objectDoesNotExistsResponse();
    }

    public static void getUsersByTraining(String trainingId){
        if (!trainingId.isEmpty()){
            try {

            }
            catch (Exception e){
                Log.e("DAL", e.getMessage());
            }

        }
    }

    //GetBEObjectEventListener should callback setActionResult with requested object
    public static void getTraining(String trainingId){
        if (!trainingId.isEmpty()){
            try {
                Firebase specificTraining = trainingsRef.child(trainingId);
                GetBEObjectEventListener listener = new GetBEObjectEventListener(ReadDataTypeEnum.training);
                specificTraining.addListenerForSingleValueEvent(listener);

            }
            catch (Exception e){
                Log.e("DAL", e.getMessage());
            }

        }

    }

    public static void getPublicTrainings(ArrayList<String> excludeTrainingIds){} //onGetTrainingsCallback

    public static void getTrainingsByUser(String userId){

    }

    public static void createTraining(BETraining training){
        try{
            trainingsRef = rootRef.child("Trainings");
            //Set location to push
            Firebase newTrainingRef = trainingsRef.push();

            // Get the unique ID generated by push()
            String generatedUniqueID = newTrainingRef.getKey();
            training.setId(generatedUniqueID);

            //Save training including ID
            newTrainingRef.setValue(training);
            Log.e("Training created", training.getName());
        } catch (Exception e) {

            CMNLogHelper.logError("DAL", e.getMessage());
        }


    }

    //DALFBOnCompleteListener called on setValue() which calls setActionResult() with result
    public static void updateTraining(BETraining training){

        //Check and update object if it exists in database, otherwise send error in response
        if (!training.getId().isEmpty()){
            try{
                Firebase specificTraining = usersRef.child(training.getId());
                DALFBOnCompleteListener listener = new DALFBOnCompleteListener();
                specificTraining.setValue(training, listener);
            }
            catch (Exception e){
                Log.e("DAL", e.getMessage());
            }
        }
        else
            objectDoesNotExistsResponse();
    }

    public void joinTraining(String trainingId, String userId){}

    private static void objectDoesNotExistsResponse(){
        BEResponse res = new BEResponse();
        res.setStatus(BEResponseStatusEnum.error);
        res.setMessage("Object does not exists");
        setActionResult(res);
    }



    //////////////////////////////////////////////////////////////////
    //register to listeners here

    //this function will be called when server API initiate
    private static void registerToEvents(){

    }


    //this function will be called when need
    private static void registerToEventsOnce(){

    }


    /////////////////////////////////////////////////////////////////
    //callbacks

    public static void setActionResponse(BEResponse response) {

        //use this to update App entities when need
        ServerAPI sApi = ServerAPI.getInstance();

        //set here response with error message which will get from firebase error if need
        sApi.setActionResponse(response);
    }



    ////////////////////////////////////////////////////////////////
    //Zina's tests

    private static void tests(){

        //Create user test
        BEUser user = new BEUser();
        user.setEmail("user@whatever.com");
        user.setName("user");
        registerUser(user);

        //Find user by id test
        getUserByUID(user.getId());

        //Find user by training id

        //Update user


        //Create training test
        BETraining t = new BETraining();
        t.setName("MyTraining");
        t.setTrainingDate(new Date());
        createTraining(t);

        //Find training by id test
        getTraining(t.getId());

        //Update training

        //Find training by user id

        //join training

        //get all public trainings


    }

}
