package zina_eliran.app.API;

import android.util.Log;

import com.firebase.client.ChildEventListener;
import com.firebase.client.DataSnapshot;
import com.firebase.client.Firebase;
import com.firebase.client.FirebaseError;
import com.firebase.client.GenericTypeIndicator;
import com.firebase.client.Query;
import com.firebase.client.ValueEventListener;

import java.util.ArrayList;
import java.util.Date;

import zina_eliran.app.API.Listeners.GetAllTrainingsListener;
import zina_eliran.app.API.Listeners.OnSetValueCompleteListener;
import zina_eliran.app.API.Listeners.GetBEObjectEventListener;
import zina_eliran.app.API.Listeners.ReadDataTypeEnum;
import zina_eliran.app.BusinessEntities.BEBaseEntity;
import zina_eliran.app.BusinessEntities.BEResponse;
import zina_eliran.app.BusinessEntities.BEResponseStatusEnum;
import zina_eliran.app.BusinessEntities.BETraining;
import zina_eliran.app.BusinessEntities.BEUser;
import zina_eliran.app.BusinessEntities.CMNLogHelper;
import zina_eliran.app.Utils.FireBaseHandler;

/**
 * Created by Zina K on 9/10/2016.
 */
public class DAL{

    //TODO Zina - please add try catch :)
    private static Firebase rootRef = new Firebase("https://trainingstudiofb.firebaseio.com");
    private static Firebase usersRef = rootRef.child("Users");
    private static Firebase trainingsRef = rootRef.child("Trainings");

    public DAL(){
        //tests();
    }

    public static void registerUser(BEUser user, FireBaseHandler fbHandler) {
        if (user != null){
            user.setVerificationCode(ServerAPI.generateVerificationCode());

            try {
                usersRef = rootRef.child("Users");
                //Set location to push
                Firebase newUserRef = usersRef.push();

                // Get the unique ID generated by push()
                String generatedUniqueID = newUserRef.getKey();
                user.setId(generatedUniqueID);

                //Save user including UUID
                ArrayList<BEBaseEntity> entities = new ArrayList<>();
                entities.add(user);
                OnSetValueCompleteListener listener = new OnSetValueCompleteListener(fbHandler,entities);
                newUserRef.setValue(user, listener);

                //Get user by generated UID - response sent via setActionResponse
//                getUserByUID(user.getId());
                CMNLogHelper.logError("DALUserCreated", user.getName());
            }
            catch (Exception e) {
                CMNLogHelper.logError("DAL", e.getMessage());
            }
        }





    }

    //GetBEObjectEventListener should callback setActionResult with requested object
    public static void getUserByUID(String userId){
        try{
            if (!userId.isEmpty()) {
                Firebase singleUserRef = usersRef.child(userId);
                GetBEObjectEventListener listener = new GetBEObjectEventListener(ReadDataTypeEnum.user,true, null);
                singleUserRef.addListenerForSingleValueEvent(listener);
            }
        }
        catch (Exception e){
            CMNLogHelper.logError("GetUserByUID", e.getMessage());
        }

    }

    //OnSetValueCompleteListener called on setValue() which calls setActionResult() with result
    public static void updateUser(BEUser user){
        //Check and update object if it exists in database, otherwise send error in response
        if (user != null && !user.getId().isEmpty()){
            try{
                Firebase specificUser = usersRef.child(user.getId());
                OnSetValueCompleteListener listener = new OnSetValueCompleteListener();
                specificUser.setValue(user, listener);
            }
            catch (Exception e){
                CMNLogHelper.logError("DAL", e.getMessage());
            }
        }
        else
            objectDoesNotExistsResponse();
    }


    public static void getUsersByTraining(String trainingId){
        if (!trainingId.isEmpty()){

            try {

            }
            catch (Exception e){
                CMNLogHelper.logError("DAL", e.getMessage());
            }

        }
    }

    //GetBEObjectEventListener should callback setActionResult with requested object
    public static void getTraining(String trainingId) {
        try {
            if (trainingId != null && !trainingId.isEmpty()) {
                Firebase specificTraining = trainingsRef.child(trainingId);
                GetBEObjectEventListener listener = new GetBEObjectEventListener(ReadDataTypeEnum.training, true );
                specificTraining.addListenerForSingleValueEvent(listener);
            } else
                objectDoesNotExistsResponse();

        } catch (Exception e) {
            CMNLogHelper.logError("DAL", e.getMessage());
        }

    }

    //Get all trainings, exclude not relevant trainings according to input list
    public static void getPublicTrainings(final ArrayList<String> excludeTrainingIds){
        BEResponse response = new BEResponse();

        try{//should be childrenEvetListener
            GetAllTrainingsListener listener = new GetAllTrainingsListener();
            trainingsRef.addListenerForSingleValueEvent(listener);

            //Get list of all existing trainings from listener
            ArrayList<BETraining> arr = listener.getAllTrainings();
            ArrayList<BEBaseEntity> filteredArr = new ArrayList<>();

            //filter trainings accoring to exclude list
            if (!arr.isEmpty()){
                for (int i = 0; i < arr.size(); i++){
                    if (!excludeTrainingIds.contains(arr.get(i).getId())){
                        filteredArr.add(arr.get(i));
                        CMNLogHelper.logError("publicTrainings", arr.get(i).toString());
                    }
                }
            }
            //Set response
            response.setStatus(BEResponseStatusEnum.success);
            response.setEntity(filteredArr);
            setActionResponse(response);
        }
        catch (Exception e){
            CMNLogHelper.logError("DAL", e.getMessage());
            response.setStatus(BEResponseStatusEnum.error);
            setActionResponse(response);
        }
    }

    //Get all trainings, filter by userID
    public static void getTrainingsByUser(String userId){
        Firebase trainingListRef = trainingsRef;
        BEResponse response = new BEResponse();
        try{
            GetAllTrainingsListener listener = new GetAllTrainingsListener();
            trainingListRef.addListenerForSingleValueEvent(listener);

            //Get list of all existing trainings from listener
            ArrayList<BETraining> arr = listener.getAllTrainings();
            ArrayList<BEBaseEntity> filteredArr = new ArrayList<>();

            //filter trainings according to userId in creator or participant fields
            if (!arr.isEmpty()){
                for (int i = 0; i < arr.size(); i++){
                    if (arr.get(i).getCreatorId().equals(userId) || arr.get(i).getPatricipatedUserIds().contains(userId)){
                        filteredArr.add(arr.get(i));
                        CMNLogHelper.logError("getTrainingByUser", arr.get(i).toString());
                    }
                }

            }
            //Set response
            response.setStatus(BEResponseStatusEnum.success);
            response.setEntity(filteredArr);
            setActionResponse(response);


        }
        catch (Exception e){
            CMNLogHelper.logError("DAL", e.getMessage());
            response.setStatus(BEResponseStatusEnum.error);
            setActionResponse(response);

        }


    }

    public static void createTraining(BETraining training){
        try{
            trainingsRef = rootRef.child("Trainings");
            //Set location to push
            Firebase newTrainingRef = trainingsRef.push();

            // Get the unique ID generated by push()
            String generatedUniqueID = newTrainingRef.getKey();
            training.setId(generatedUniqueID);

            //Save training including ID
            newTrainingRef.setValue(training);
            Log.e("Training created", training.getName());
        } catch (Exception e) {

            CMNLogHelper.logError("DAL", e.getMessage());
        }


    }

    //OnSetValueCompleteListener called on setValue() which calls setActionResult() with result
    public static void updateTraining(BETraining training){

        //Check and update object if it exists in database, otherwise send error in response
        if (!training.getId().isEmpty()){
            try{
                Firebase specificTraining = usersRef.child(training.getId());
                OnSetValueCompleteListener listener = new OnSetValueCompleteListener();
                specificTraining.setValue(training, listener);
            }
            catch (Exception e){
                CMNLogHelper.logError("UpgateTraining", e.getMessage());
            }
        }
        else
            objectDoesNotExistsResponse();
    }

    //update
    public static void joinTraining(String trainingId, String userId){
        //Ask Eliran if he can send objects instead of IDs, then i can just run update
        try{
            if (trainingId != null && userId != null){
                //Create DB reference
                Firebase userRef = usersRef.child(userId);
                Firebase trainingRef = trainingsRef.child(trainingId);

                //Set up listeners
                GetBEObjectEventListener listenerUser = new GetBEObjectEventListener(ReadDataTypeEnum.user, false);
                GetBEObjectEventListener listenerTraining = new GetBEObjectEventListener(ReadDataTypeEnum.training, false);

                //Add listeners to DB references
                userRef.addListenerForSingleValueEvent(listenerUser);
                trainingRef.addListenerForSingleValueEvent(listenerTraining);

                //Get relevant data from listener
                BEUser user = (BEUser)listenerUser.getObject();
                BETraining training = (BETraining)listenerTraining.getObject();

                //Update objects with new IDs
                user.addTrainingToTrainingList(trainingId);
                training.addUserToUsersList(userId);

                //Save objects in DB and return response via setActionResponce
                updateTraining(training);
                updateUser(user);

            }
            else
                objectDoesNotExistsResponse();
        }
        catch (Exception e){
            CMNLogHelper.logError("joinTraining", e.getMessage());
        }
    }

    private static void objectDoesNotExistsResponse(){
        BEResponse res = new BEResponse();
        res.setStatus(BEResponseStatusEnum.error);
        res.setMessage("Object does not exists");
        setActionResponse(res);
    }



    //////////////////////////////////////////////////////////////////
    //register to listeners here

    //this function will be called when server API initiate
    private static void registerToEvents(){

    }


    //this function will be called when need with object id and extected BE type
    private static void registerToEventsOnce(String uid, ReadDataTypeEnum expectedObjectType){
        if (!uid.isEmpty() && expectedObjectType != null){
            try {
                Firebase specificObjectRef;
                if (expectedObjectType == ReadDataTypeEnum.training){
                    specificObjectRef = trainingsRef.child(uid);
                }
                else {
                    specificObjectRef = usersRef.child(uid);
                }
                GetBEObjectEventListener listener = new GetBEObjectEventListener(expectedObjectType, true);
                specificObjectRef.addListenerForSingleValueEvent(listener);

            }
            catch (Exception e){
                CMNLogHelper.logError("RegisterToEvent", e.getMessage());
            }

        }
        else
            objectDoesNotExistsResponse();
    }


    /////////////////////////////////////////////////////////////////
    //callbacks

    public static void setActionResponse(BEResponse response) {

        //Register usersRef to childEventListener
//        usersRef.addChildEventListener(new ChildEventListener() {
//            @Override
//            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
//                CMNLogHelper.logError("ChildListenerAdd", dataSnapshot.getValue().toString());
//            }
//
//            @Override
//            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
//                CMNLogHelper.logError("ChildListenerChange", dataSnapshot.getValue().toString());
//            }
//
//            @Override
//            public void onChildRemoved(DataSnapshot dataSnapshot) {
//
//            }
//
//            @Override
//            public void onChildMoved(DataSnapshot dataSnapshot, String s) {
//
//            }
//
//            @Override
//            public void onCancelled(FirebaseError firebaseError) {
//
//            }
//        });

        //use this to update App entities when need
        ServerAPI sApi = ServerAPI.getInstance();

        //set here response with error message which will get from firebase error if need
        sApi.setActionResponse(response);
    }



    ////////////////////////////////////////////////////////////////
    //Zina's tests

    private static void tests(){

        //Create user test
        BEUser user = new BEUser();
        user.setEmail("blabla@whatever.com");
        user.setName("user");
        registerUser(user, null);

        //Find user by id test
        getUserByUID(user.getId());

        //Find user by training id

        //Update user
        user.setHeigth(180);
        updateUser(user);


        //Create training test
        BETraining t = new BETraining();
        t.setName("MyTraining");
        t.setCreatorId("-KSOPKQmfBJKpUcwLAmt");
        t.setTrainingDate(new Date());
        createTraining(t);

        //Find training by id test
        getTraining(t.getId());

        //Update training
        t.setName("UpdatedName");
        updateTraining(t);

        //Find training by user id
        getTrainingsByUser("-KSOPKQmfBJKpUcwLAmt");

        //join training

        //get all public trainings
        ArrayList<String> arr = new ArrayList<>();
        arr.add("-KSNfQcBV2d9ESKsQqic");
        arr.add("-KSNfUF-UvM66pv4ZzRt");
        arr.add("-KSNfUInzvpo27SmmZDS");
        getPublicTrainings(arr);


    }

}
